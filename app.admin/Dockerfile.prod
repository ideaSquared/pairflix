# Multi-stage production build for admin app
FROM node:20-alpine AS components-builder

WORKDIR /app

# Copy component library files
COPY lib.components/package*.json ./lib.components/
COPY lib.components/tsconfig*.json ./lib.components/
COPY lib.components/vite.config.ts ./lib.components/
COPY lib.components/src/ ./lib.components/src/

# Install dependencies and build components
WORKDIR /app/lib.components
RUN --mount=type=cache,target=/app/.npm \
    npm ci --cache /app/.npm && \
    npm run build

# Build admin app stage
FROM node:20-alpine AS app-builder

WORKDIR /app

# Copy package files
COPY app.admin/package*.json ./

# Copy built components from previous stage
COPY --from=components-builder /app/lib.components/dist ./node_modules/@pairflix/components/dist
COPY --from=components-builder /app/lib.components/package.json ./node_modules/@pairflix/components/

# Install dependencies
RUN --mount=type=cache,target=/app/.npm \
    npm ci --cache /app/.npm

# Copy source code
COPY app.admin/ .

# Build the application
RUN npm run build

# Production nginx stage
FROM nginx:alpine AS runner

# Install wget for health checks
RUN apk add --no-cache wget

# Copy built application
COPY --from=app-builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY app.admin/nginx.conf /etc/nginx/conf.d/default.conf

# Create non-root user
RUN addgroup -g 1001 -S nginx && \
    adduser -S nginx -u 1001 -G nginx

# Change ownership of nginx files
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Make nginx run as non-root
RUN touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

USER nginx

EXPOSE 80

# Add health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost/ || exit 1

CMD ["nginx", "-g", "daemon off;"] 